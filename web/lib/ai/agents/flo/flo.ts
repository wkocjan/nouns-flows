import { ChatData } from "@/app/chat/chat-body"
import { getVoters } from "@/app/item/[grantId]/components/get-voters"
import { submitApplicationTool } from "@/lib/ai/tools/applications/tool"
import { queryEmbeddingsTool } from "@/lib/ai/tools/embeddings/tool"
import { getTools, getToolsPrompt, Tool } from "@/lib/ai/tools/tool"
import database from "@/lib/database/edge"
import { canEditGrant } from "@/lib/database/helpers"
import { cache } from "react"
import { aboutPrompt } from "../../prompts/about"
import { getAllNounishCitizensPrompt } from "../../prompts/nounish-citizens"
import { getUserDataPrompt } from "../../prompts/user-data"
import { applicationTemplateTool } from "../../tools/application-template/tool"
import { updateGrantTool } from "../../tools/grants/update-grant"
import { Agent } from "../agent"
import { floPersonalityPrompt } from "./personality"

export async function getFlo(data: ChatData): Promise<Agent> {
  const tools: Tool[] = [queryEmbeddingsTool, submitApplicationTool, applicationTemplateTool]

  if (data.grantId && data.address) {
    const grant = await getGrant(data.grantId)

    if (grant && canEditGrant(grant, data.address)) {
      tools.push(updateGrantTool)
    }
  }

  return {
    prompt: await getFloPrompt(data, tools),
    tools: getTools(tools),
  }
}

async function getFloPrompt(data: ChatData, tools: Tool[]) {
  let prompt = `${aboutPrompt}\n\n`
  prompt += `${floPersonalityPrompt}\n`
  prompt += await getGrantPrompt(data.grantId)
  prompt += await getUserDataPrompt(data.address)
  prompt += getDataPrompt(data)
  prompt += await getAllNounishCitizensPrompt()
  prompt += getToolsPrompt(tools)

  return prompt
}

function getDataPrompt(data: ChatData) {
  if (!data || Object.keys(data).length === 0) return ""
  return `\n\n# Additional data:\n${JSON.stringify(data, null, 2)}`
}

async function getGrantPrompt(grantId: string | undefined) {
  if (!grantId) return ""

  const grant = await getGrant(grantId)
  if (!grant) return ""

  const stories = await database.story.findMany({
    select: {
      title: true,
      tagline: true,
      id: true,
      summary: true,
      key_points: true,
      participants: true,
      timeline: true,
      created_at: true,
      updated_at: true,
      grant_ids: true,
    },
    where: { complete: true, header_image: { not: null }, grant_ids: { has: grantId } },
    orderBy: { updated_at: "desc" },
    take: 10,
  })

  const voters = await getVoters(grant.parentContract as `0x${string}`, grant.id)

  return `\n\n## Grant:
  Context and information about the current grant is provided below.

  The information visible on the grant page comes from "derivedData.pageData" field - it was
  generated by AI agent based on the grant data. Grant recipients (and only them) can edit this information,
  by using the "updateGrant" tool.

  ${JSON.stringify(grant, null, 2)}

  ### Users who voted for this grant
  These are ETH addresses of users who voted for this grant and their votes count:
  
  ${JSON.stringify(voters, null, 2)}
  
  ### Stories
  Last 10 stories related to this grant:
  
  ${JSON.stringify(stories, null, 2)}
  `
}

const getGrant = cache(async (grantId: string) => {
  return database.grant.findFirst({
    where: { id: grantId, isFlow: 0 },
    include: { derivedData: { select: { pageData: true } } },
  })
})
