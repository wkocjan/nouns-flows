generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views", "multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["public", "web"]
}

model Draft {
  id              Int      @id @default(autoincrement())
  title           String
  description     String
  image           String
  users           String[]
  isPrivate       Boolean  @default(true)
  isOnchain       Boolean  @default(false)
  updatedAt       DateTime @updatedAt
  createdAt       DateTime @default(now())
  flowId          String
  isFlow          Boolean  @default(false)
  transactionHash String?

  flow Grant @relation(fields: [flowId], references: [id])

  @@index([isPrivate], map: "isPrivate_1")
  @@index([isOnchain], map: "isOnchain_1")
  @@index([flowId], map: "flowId_1")
  @@index([createdAt], map: "createdAt_1")
  @@map("Draft")
  @@schema("web")
}

view Grant {
  id                    String  @id
  recipient             String
  flowId                String
  submitter             String
  parentContract        String
  isTopLevel            Int
  isFlow                Int
  title                 String
  description           String
  image                 String
  tagline               String?
  url                   String?
  isRemoved             Int
  isActive              Int
  votesCount            String
  monthlyFlowRate       String
  totalEarned           String
  claimableBalance      String
  tcr                   String  @unique
  erc20                 String  @unique
  arbitrator            String  @unique
  tokenEmitter          String  @unique
  status                Int
  challengePeriodEndsAt Int
  isDisputed            Int
  isResolved            Int
  evidenceGroupID       String
  createdAt             Int
  updatedAt             Int

  flow      Grant   @relation("Subgrants", fields: [flowId], references: [id])
  subgrants Grant[] @relation("Subgrants")
  drafts    Draft[]

  @@map("Grant")
  @@schema("public")
}

view Vote {
  id          String @id
  contract    String
  recipientId String
  tokenId     String
  bps         Int
  voter       String
  blockNumber String
  isStale     Int
  votesCount  String

  @@schema("public")
}

view PonderMeta {
  key   String @id
  value String

  @@map("_ponder_meta")
  @@schema("public")
}

view Dispute {
  id                  String @id
  disputeId           String
  arbitrator          String
  arbitrable          String
  grantId             String
  challenger          String
  votingStartTime     Int
  votingEndTime       Int
  revealPeriodEndTime Int
  appealPeriodEndTime Int
  votes               String
  ruling              Int
  creationBlock       Int
  totalSupply         String
  isExecuted          Int

  @@schema("public")
}

view DisputeVote {
  id         String  @id
  arbitrator String
  disputeId  String
  secretHash String
  voter      String
  choice     Int?
  votes      String?
  reason     String?

  @@schema("public")
  @@unique([disputeId, arbitrator, voter])
}
