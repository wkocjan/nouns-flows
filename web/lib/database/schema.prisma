generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views", "multiSchema"]
  output          = "../../node_modules/@prisma/flows"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
  schemas   = ["web", "public"]
}

model Draft {
  id              Int      @id @default(autoincrement())
  title           String
  description     String
  blocks          String?
  tagline         String?
  image           String
  users           String[]
  isPrivate       Boolean  @default(true)
  isOnchain       Boolean  @default(false)
  updatedAt       DateTime @updatedAt
  createdAt       DateTime @default(now())
  flowId          String
  isFlow          Boolean  @default(false)
  transactionHash String?

  flow Grant @relation(fields: [flowId], references: [id])

  @@index([isPrivate])
  @@index([isOnchain])
  @@index([flowId])
  @@index([createdAt])
  @@map("Draft")
  @@schema("web")
}

model FarcasterUser {
  fid         Int      @id
  username    String
  displayName String
  imageUrl    String
  addresses   String[]
  stories     Story[]  @relation("author")

  @@map("FarcasterUser")
  @@schema("web")
}

model Comment {
  id            String   @id @default(cuid())
  content       String
  author        String
  commentableId String
  parentId      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  parent  Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies Comment[] @relation("CommentReplies")

  @@index([commentableId])
  @@index([parentId])
  @@index([author])
  @@map("Comment")
  @@schema("web")
}

model DerivedData {
  id        String   @id @default(cuid())
  grantId   String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  grant     Grant    @relation(fields: [grantId], references: [id])

  // derived data here (generated from ai etc.)
  minimumSalary     Int?
  template          String?
  lastBuilderUpdate DateTime?

  @@index([grantId])
  @@map("DerivedData")
  @@schema("web")
}

model Conversation {
  id          String   @id
  type        String
  messages    Json
  data        Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        String
  attachments Json?

  @@index([user])
  @@index([type])
  @@map("Conversation")
  @@schema("web")
}

model Story {
  id             String   @id @default(uuid())
  title          String
  summary        String
  key_points     String[]
  participants   String[]
  header_image   String?
  timeline       Json
  sentiment      String   @db.VarChar(10)
  completeness   Decimal  @db.Decimal(3, 2)
  complete       Boolean
  sources        String[]
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  media_urls     String[]
  author         Int
  tagline        String
  grant_id       String
  parent_flow_id String
  edits          Json?

  user  FarcasterUser? @relation("author", fields: [author], references: [fid])
  grant Grant          @relation("story_grant", fields: [grant_id], references: [id])
  flow  Grant          @relation("story_flow", fields: [parent_flow_id], references: [id])

  @@index([complete])
  @@index([updated_at])
  @@map("Stories")
  @@schema("web")
}

view Grant {
  id                               String  @id
  recipient                        String
  flowId                           String
  submitter                        String
  parentContract                   String
  isTopLevel                       Int
  isFlow                           Int
  title                            String
  description                      String
  image                            String
  tagline                          String?
  url                              String?
  isRemoved                        Int
  isActive                         Int
  votesCount                       String
  monthlyIncomingFlowRate          String
  monthlyIncomingBaselineFlowRate  String
  monthlyIncomingBonusFlowRate     String
  monthlyOutgoingFlowRate          String
  monthlyRewardPoolFlowRate        String
  monthlyBaselinePoolFlowRate      String
  monthlyBonusPoolFlowRate         String
  bonusMemberUnits                 String
  baselineMemberUnits              String
  totalEarned                      String
  activeRecipientCount             Int
  awaitingRecipientCount           Int
  challengedRecipientCount         Int
  tcr                              String  @unique
  erc20                            String  @unique
  arbitrator                       String  @unique
  tokenEmitter                     String  @unique
  status                           Int
  challengePeriodEndsAt            Int
  isDisputed                       Int
  isResolved                       Int
  evidenceGroupID                  String  @unique
  createdAt                        Int
  updatedAt                        Int
  baselinePool                     String
  bonusPool                        String
  managerRewardPool                String
  superToken                       String
  managerRewardSuperfluidPool      String
  managerRewardPoolFlowRatePercent Int
  baselinePoolFlowRatePercent      Int

  flow         Grant         @relation("Subgrants", fields: [flowId], references: [id])
  subgrants    Grant[]       @relation("Subgrants")
  drafts       Draft[]
  disputes     Dispute[]
  tokenHolders TokenHolder[]
  evidences    Evidence[]
  derivedData  DerivedData?
  stories      Story[]       @relation("story_grant")
  storiesFlow  Story[]       @relation("story_flow")

  @@map("Grant")
  @@schema("public")
}

view Vote {
  id          String @id
  contract    String
  recipientId String
  tokenId     String
  bps         Int
  voter       String
  blockNumber String
  isStale     Int
  votesCount  String

  @@schema("public")
}

view PonderMeta {
  key   String @id
  value String

  @@map("_ponder_meta")
  @@schema("public")
}

view Dispute {
  id                   String     @id
  disputeId            String
  arbitrator           String
  arbitrable           String
  grantId              String
  challenger           String
  votingStartTime      Int
  votingEndTime        Int
  revealPeriodEndTime  Int
  votes                String
  requesterPartyVotes  String
  challengerPartyVotes String
  ruling               Int
  creationBlock        Int
  totalSupply          String
  isExecuted           Int
  evidenceGroupID      String     @unique
  grant                Grant      @relation(fields: [grantId], references: [id])
  evidences            Evidence[]

  @@schema("public")
}

view DisputeVote {
  id          String  @id
  arbitrator  String
  disputeId   String
  commitHash  String
  voter       String
  choice      Int?
  votes       String?
  reason      String?
  committedAt Int
  revealedBy  String?
  revealedAt  Int?

  @@unique([disputeId, arbitrator, voter])
  @@schema("public")
}

view TokenHolder {
  id            String @id
  tokenContract String
  flow          Grant  @relation(fields: [tokenContract], references: [erc20])
  holder        String
  firstPurchase Int
  amount        String

  @@unique([tokenContract, holder])
  @@schema("public")
}

view Evidence {
  id              String @id
  arbitrator      String
  evidenceGroupID String
  evidence        String
  party           String
  blockNumber     String

  dispute Dispute @relation(fields: [evidenceGroupID], references: [evidenceGroupID])
  grant   Grant   @relation(fields: [evidenceGroupID], references: [evidenceGroupID])

  @@schema("public")
}
